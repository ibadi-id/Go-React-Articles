{
  "router": {
    "middlewares": [
      {
        "pkg": "github.com/go-chi/cors",
        "func": "(*Cors).Handler-fm",
        "comment": "Handler apply the CORS specification on the request, and add relevant CORS headers\nas necessary.\n",
        "file": "C:/Users/smith/go/pkg/mod/github.com/go-chi/cors@v1.2.0/cors.go",
        "line": 211
      },
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "RequestID",
        "comment": "RequestID is a middleware that injects a request ID into the context of each\nrequest. A request ID is a string of the form \"host.example.com/random-0001\",\nwhere \"random\" is a base62 random string that uniquely identifies this go\nprocess, and where the last number is an atomically incremented request\ncounter.\n",
        "file": "C:/Users/smith/go/pkg/mod/github.com/go-chi/chi/v5@v5.0.4/middleware/request_id.go",
        "line": 67
      },
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "Logger",
        "comment": "Logger is a middleware that logs the start and end of each request, along\nwith some useful data about what was requested, what the response status was,\nand how long it took to return. When standard output is a TTY, Logger will\nprint in color, otherwise it will print in black and white. Logger prints a\nrequest ID if one is provided.\n\nAlternatively, look at https://github.com/goware/httplog for a more in-depth\nhttp logger with structured logging support.\n\nIMPORTANT NOTE: Logger should go before any other middleware that may change\nthe response, such as `middleware.Recoverer`. Example:\n\n```go\nr := chi.NewRouter()\nr.Use(middleware.Logger)        // \u003c--\u003c\u003c Logger should come before Recoverer\nr.Use(middleware.Recoverer)\nr.Get(\"/\", handler)\n```\n",
        "file": "C:/Users/smith/go/pkg/mod/github.com/go-chi/chi/v5@v5.0.4/middleware/logger.go",
        "line": 41
      },
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "Recoverer",
        "comment": "Recoverer is a middleware that recovers from panics, logs the panic (and a\nbacktrace), and returns a HTTP 500 (Internal Server Error) status if\npossible. Recoverer prints a request ID if one is provided.\n\nAlternatively, look at https://github.com/pressly/lg middleware pkgs.\n",
        "file": "C:/Users/smith/go/pkg/mod/github.com/go-chi/chi/v5@v5.0.4/middleware/recoverer.go",
        "line": 21
      },
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "URLFormat",
        "comment": "URLFormat is a middleware that parses the url extension from a request path and stores it\non the context as a string under the key `middleware.URLFormatCtxKey`. The middleware will\ntrim the suffix from the routing path and continue routing.\n\nRouters should not include a url parameter for the suffix when using this middleware.\n\nSample usage.. for url paths: `/articles/1`, `/articles/1.json` and `/articles/1.xml`\n\n func routes() http.Handler {\n   r := chi.NewRouter()\n   r.Use(middleware.URLFormat)\n\n   r.Get(\"/articles/{id}\", ListArticles)\n\n   return r\n }\n\n func ListArticles(w http.ResponseWriter, r *http.Request) {\n\t  urlFormat, _ := r.Context().Value(middleware.URLFormatCtxKey).(string)\n\n\t  switch urlFormat {\n\t  case \"json\":\n\t  \trender.JSON(w, r, articles)\n\t  case \"xml:\"\n\t  \trender.XML(w, r, articles)\n\t  default:\n\t  \trender.JSON(w, r, articles)\n\t  }\n}\n",
        "file": "C:/Users/smith/go/pkg/mod/github.com/go-chi/chi/v5@v5.0.4/middleware/url_format.go",
        "line": 47
      },
      {
        "pkg": "github.com/go-chi/render",
        "func": "SetContentType.func1",
        "comment": "",
        "file": "C:/Users/smith/go/pkg/mod/github.com/go-chi/render@v1.0.1/content_type.go",
        "line": 49,
        "anonymous": true
      }
    ],
    "routes": {
      "/article/*": {
        "router": {
          "middlewares": [],
          "routes": {
            "/": {
              "handlers": {
                "GET": {
                  "middlewares": [],
                  "method": "GET",
                  "pkg": "github.com/ibadi-id/article-test/actions",
                  "func": "ListArticles",
                  "comment": "ListArticles adalah fungsi untuk menampilkan semua Article\n",
                  "file": "F:/SHARING VISION/test/backend/actions/actions.go",
                  "line": 16
                },
                "POST": {
                  "middlewares": [],
                  "method": "POST",
                  "pkg": "github.com/ibadi-id/article-test/actions",
                  "func": "CreateArticle",
                  "comment": "CreateArticle adalah fungsi untuk persists article baru dan mengembalikannya\n",
                  "file": "F:/SHARING VISION/test/backend/actions/actions.go",
                  "line": 95
                }
              }
            },
            "/{articleID}/*": {
              "router": {
                "middlewares": [
                  {
                    "pkg": "github.com/ibadi-id/article-test/actions",
                    "func": "ArticleCtx",
                    "comment": "ArticleCtx middleware untuk load context \"article\" pada request\n",
                    "file": "F:/SHARING VISION/test/backend/actions/actions.go",
                    "line": 69
                  }
                ],
                "routes": {
                  "/": {
                    "handlers": {
                      "DELETE": {
                        "middlewares": [],
                        "method": "DELETE",
                        "pkg": "github.com/ibadi-id/article-test/actions",
                        "func": "DeleteArticle",
                        "comment": "DeleteArticle adalah fungsi untuk hapus article by id\n",
                        "file": "F:/SHARING VISION/test/backend/actions/actions.go",
                        "line": 138
                      },
                      "GET": {
                        "middlewares": [],
                        "method": "GET",
                        "pkg": "github.com/ibadi-id/article-test/actions",
                        "func": "GetArticle",
                        "comment": "GetArticle fungsi untuk mengembalikan spesifik article (default by id, bisa dikembangkan by slug)\n",
                        "file": "F:/SHARING VISION/test/backend/actions/actions.go",
                        "line": 112
                      },
                      "PUT": {
                        "middlewares": [],
                        "method": "PUT",
                        "pkg": "github.com/ibadi-id/article-test/actions",
                        "func": "UpdateArticle",
                        "comment": "UpdateArticle fungsi untuk updates Article dan mengembalikannya\n",
                        "file": "F:/SHARING VISION/test/backend/actions/actions.go",
                        "line": 123
                      }
                    }
                  }
                }
              }
            },
            "/{limit}/{offset}": {
              "handlers": {
                "GET": {
                  "middlewares": [],
                  "method": "GET",
                  "pkg": "github.com/ibadi-id/article-test/actions",
                  "func": "ListArticlesWithPage",
                  "comment": "ListArticlesWithPage adalah fungsi untuk menampilkan article dengan pagination\n",
                  "file": "F:/SHARING VISION/test/backend/actions/actions.go",
                  "line": 34
                }
              }
            }
          }
        }
      }
    }
  }
}